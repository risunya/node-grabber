import { SqliteStorage, TelegramClient } from '@mtcute/node';
import { Bot } from "grammy"; 
import { Dispatcher, filters } from '@mtcute/dispatcher';
import 'dotenv/config';
import { apiHash, apiId, botApi, userId } from './api/index.js';
import { deleteChannel, getChannelsData } from './data/index.js';
import {
	conversations,
	createConversation,
} from "@grammyjs/conversations";
import { userConversation } from "./conversations/addchannel.js";

export const bot = new Bot(botApi); 
bot.use(conversations())
	 .use(createConversation(userConversation))


export const tg = new TelegramClient({
  apiId: apiId,
  apiHash: apiHash,
  storage: new SqliteStorage('./auth/hash.session')
});

(async () => {
  try {
    const self = await tg.start({
			phone: () => tg.input('Phone > '),
			code: () => tg.input('Code > '),
			password: () => tg.input('Password > ')
		}); 
    console.log(`Logged in as ${self.displayName}`);
  } catch (error) {
    console.error('Failed to start client:', error);
  }
})();


const dp = new Dispatcher(tg);
const peer = await tg.resolvePeer("me")

dp.onNewMessage(async (msg) => {
  if (msg.chat.inputPeer._ === 'inputPeerChannel') {
    const channels = getChannelsData();

    const channel = channels.find(
      (channel) => channel.id == `-100${msg.chat.inputPeer.channelId}`
    );

    if (channel) {
      try {
        await msg.forwardTo({ toChatId: peer });
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channel.id}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
  }
});

	const channelsNames = getChannelsData()
  .map((el) => el.name) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤ –∏–º–µ–Ω
  .join('\n');
	await bot.api.sendMessage(userId, `–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ\n
	–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n${channelsNames}`);

	await bot.api.setMyCommands([
		{ command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
		{ command: "addchannel", description: "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" },
		{ command: "deletechannel", description: "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª" },
		{ command: "editchannels", description: "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª" },
		{ command: "currentchannels", description: "–¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏" },
	]);


bot.command("addchannel", async (ctx) => {
	await ctx.conversation.enter('userConversation');
  const item = ctx.match;
	console.log(item);
});

bot.command("currentchannels", async (ctx) => {
	let data = getChannelsData()
	await ctx.reply(data.length == 0 ? '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è 0 –∫–∞–Ω–∞–ª–æ–≤.' :getChannelsData()) 
});

bot.command("deletechannel", async (ctx) => {
  const channelName = ctx.match; 
  if (!channelName) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /deletechannel ChannelName');
  }
  deleteChannel(channelName);
  ctx.reply(`–ö–∞–Ω–∞–ª "${channelName}" —É–¥–∞–ª–µ–Ω.`);
});





bot.start();