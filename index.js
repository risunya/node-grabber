import { SqliteStorage, TelegramClient } from '@mtcute/node';
import { Bot } from "grammy"; 
import { Dispatcher, filters } from '@mtcute/dispatcher';
import 'dotenv/config';
import { apiHash, apiId, botApi, userId } from './api/index.js';
import { deleteChannel, getChannelsData, getSettingsValue, updateSettings } from './data/index.js';
import {
	conversations,
	createConversation,
} from "@grammyjs/conversations";
import { 
	deleteChannelConversation,
	addChannelConversation,
	currentChannelsConversation
 } from './conversations/index.js';
import { calculateChannelId, isTwoUsernames, isUserName, userNameToLink } from './utils/helpers.js';
import { addToDB } from './conversations/addchannel.js';
import { sendCurrentChannels } from './conversations/currentchannels.js';
import { sendCurrentSettings, settingsConversation } from './conversations/settings.js';

export const bot = new Bot(botApi); 
bot.use(conversations())
	 .use(createConversation(addChannelConversation))
	 .use(createConversation(deleteChannelConversation))
	 .use(createConversation(currentChannelsConversation))
	 .use(createConversation(settingsConversation))


export const tg = new TelegramClient({
  apiId: apiId,
  apiHash: apiHash,
  storage: new SqliteStorage('./auth/hash.session'),
	updates: {
		messageGroupingInterval: 1000,
}});

(async () => {
  try {
    const self = await tg.start({
			phone: () => tg.input('Phone > '),
			code: () => tg.input('Code > '),
			password: () => tg.input('Password > ')
		}); 
    console.log(`Logged in as ${self.displayName}`);
  } catch (error) {
    console.error('Failed to start client:', error);
  }
})();


const dp = new Dispatcher(tg);

dp.onNewMessage(
  filters.photo,
  async (msg) => {
    if (msg.chat.inputPeer._ === 'inputPeerChannel') {
      const sendFrom = calculateChannelId(msg.chat.inputPeer.channelId);
      const channels = getChannelsData();
      const channel = channels.find((channel) => channel.channelIdFrom == sendFrom);

      if (channel) {
        try {
          const ids = channel.channelIdTo.split(',');
          const quotingEnabled = getSettingsValue('quoting');
          const logEnabled = getSettingsValue('logs');

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          if (msg.media?.id) {
            for (const id of ids) {
              sendMedia(msg, id, logEnabled, quotingEnabled, sendFrom);
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Ñ–æ—Ç–æ:', error);
        }
      }
    }
  }
);


dp.onNewMessage(
  filters.not(filters.photo),
  async (msg) => {
    if (msg.chat.inputPeer._ === 'inputPeerChannel') {
      const sendFrom = calculateChannelId(msg.chat.inputPeer.channelId);
      const channels = getChannelsData();
      const channel = channels.find((channel) => channel.channelIdFrom == sendFrom);

      if (channel) {
        try {
          const ids = channel.channelIdTo.split(',');
          const quotingEnabled = getSettingsValue('quoting');
          const logEnabled = getSettingsValue('logs');
          
          if (ids.length == 1) {
            setTimeout(() => {
              msg.forwardTo({ toChatId: Number(ids[0]), noAuthor: !quotingEnabled });
            }, 500);
            logEnabled && console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${sendFrom} –≤ nodegrabber`);
          } else {
            for (const id of ids) {
              setTimeout(() => {
                msg.forwardTo({ toChatId: Number(id), noAuthor: !quotingEnabled });
              }, 500);
              logEnabled && console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${sendFrom} –≤ ${id}`);
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      }
    }
  }
);

//media 
const sendMedia = (msg, id, logsEnabled, quotingEnabled, sendFrom) => {
  setTimeout(() => {
		msg.forwardTo({ toChatId: Number(id), noAuthor: !quotingEnabled});
  }, 500);
  logsEnabled && console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${sendFrom} –≤ ${id}`);
}

dp.onMessageGroup(
  async (msg) => {

    if (msg.chat.inputPeer._ === 'inputPeerChannel') {
      const sendFrom = calculateChannelId(msg.chat.inputPeer.channelId);
      const channels = getChannelsData();
      const channel = channels.find((channel) => channel.channelIdFrom == sendFrom);

      if (channel) {
        try {
          const ids = channel.channelIdTo.split(',');
          const quotingEnabled = getSettingsValue('quoting');
          const logEnabled = getSettingsValue('logs');

          if (ids.length == 1) {
            sendMedia(msg, ids[0], logEnabled, quotingEnabled, sendFrom);
          } else {
            for (const id of ids) {
              sendMedia(msg, id, logEnabled, quotingEnabled, sendFrom);
            }
          }

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      }
    }
  }
);

	const introText = `–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ\n\n` + 
	(!sendCurrentChannels() ? `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add !` : `–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:\n${sendCurrentChannels()}`)
	await bot.api.sendMessage(userId, introText);

	await bot.api.setMyCommands([
		{ command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
		{ command: "add", description: "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" },
		{ command: "del", description: "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª" },
		{ command: "cur", description: "–¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏" },
		{ command: "settings", description: "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" },
	]);


bot.command("add", async (ctx) => {
	const shortcut = ctx.match;
	const [channelNameFrom, channelNameTo] = shortcut.split(' ');

	if (isTwoUsernames(shortcut)) {
		addToDB(ctx, channelNameFrom, channelNameTo)
	} else {
		await ctx.conversation.enter('addChannelConversation');
	}
});

bot.command("cur", async (ctx) => {
	await ctx.conversation.enter('currentChannelsConversation');
});

bot.command("del", async (ctx) => {
  const channelName = ctx.match; 
	//¬†–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ
  if (isUserName(channelName)) {
		deleteChannel(channelName);
		ctx.reply(`–ö–∞–Ω–∞–ª "${channelName}" —É–¥–∞–ª–µ–Ω.`);
  } else {
		await ctx.conversation.enter('deleteChannelConversation');
	}
});

bot.command("settings", async (ctx) => {
	await ctx.conversation.enter("settingsConversation");
});

bot.on("callback_query:data", async (ctx) => {
	const callbackData = ctx.callbackQuery.data;

	if (callbackData === "leave") {
		await ctx.api.deleteMessage(ctx.chat.id, ctx.callbackQuery.message.message_id);
		await ctx.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ‚úÖ");
	} else {
		updateSettings(callbackData, Number(!getSettingsValue(callbackData))); 

		const updatedSettings = sendCurrentSettings();
		await ctx.editMessageText(updatedSettings.text, {
			reply_markup: updatedSettings.reply_markup
		});

		await ctx.answerCallbackQuery("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ");
	}
});

bot.start();